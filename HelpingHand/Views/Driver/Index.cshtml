@model IEnumerable<HelpingHand.Models.OrderModels>

@{
    ViewBag.Title = "Index";
}


<div class="jumbotron" style="background-image: url(http://helpinghands-salem.org/wp-content/uploads/2014/09/helping-hands-bg.png); background-size: 50%;">
    <h1>Helping Hand</h1>
    <h2>Driver's Aide and Order Details</h2>

</div>
<div class="row">
    <div class="col-sm-6">
        <br>
        <h2 align="center">Directions</h2>
    </div>
    <div class="col-sm-6">
        <br>
        <h2 align="center">Orders Map</h2>
    </div>
</div>
<!-- This css is to give a nice big popup "info window" when a marker is clicked on the map -->
<style>
    .infoDiv {
        height: 150px;
        width: 300px;
        -webkit-user-select: none;
        background-color: white;
    }

    #map {
        height: 100%;
    }

    #directions {
        height: 100%;
        float: left;
        width: 390px;
        overflow: auto;
    }
</style>
<br />
<!-- This is the div that will contain the Google Map -->
<div class="row">
    <div class="col-sm-6">
        <div id="directions" style="height: 300px;"></div>
    </div>
    <div class="col-sm-6">
        <div id="map" style="height: 300px;"></div>
    </div>
</div>
<div class="row">
    <h2>Orders Information</h2>
    @*<div id="order" style="height: 300px;"></div>*@


    @*THIS IS THE ORDERS INFORMATION*@
    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.status)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.payment)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.fee)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.orderDetails)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.timeFrame)
            </th>
            <th>
                <p> Customer</p>
                @*@Html.DisplayNameFor(model => model.CustomerID.email)*@
            </th>
            <th>
                <p>My ID:</p>
                @*@Html.DisplayNameFor(model => model.DriverID.email)*@
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.status)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.payment)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.fee)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.orderDetails)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.timeFrame)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CustomerID.email)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DriverID.email)
                </td>
                <td>
                    @*@Html.ActionLink("Pick", "Pick")*@
                    @Html.ActionLink("Pick", "Pick", new { id = item.ID })
             
                </td>
            </tr>
        }
</div>

@section scripts {
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB3mnFZJXsKn31NVKssduRVdJv74gX7A5A"></script>
    <section class="scripts">

        <script type="text/javascript">


            $(document).ready(function () {
                Initialize();
            });

            // Where all the fun happens
            function Initialize() {

                // Google has tweaked their interface somewhat - this tells the api to use that new UI
                google.maps.visualRefresh = true;
                // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
                var mapOptions = {
                    zoom: 12,
                    center: { lat: -34.397, lng: 150.644 },
                    mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
                };

                //GeoLocation FIND
                var infoWindow = new google.maps.InfoWindow({ map: map });
                // This makes the div with id "map_canvas" a google map
                var map = new google.maps.Map(document.getElementById("map"), mapOptions);
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(function (position) {
                        var pos = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };

                        infoWindow.setPosition(pos);
                        infoWindow.setContent('Location found.');
                        map.setCenter(pos);

                    }, function () {
                        handleLocationError(true, infoWindow, map.getCenter());
                    });
                } else {
                    // Browser doesn't support Geolocation
                    handleLocationError(false, infoWindow, map.getCenter());
                }

                function handleLocationError(browserHasGeolocation, infoWindow, pos) {
                    infoWindow.setPosition(pos);
                    infoWindow.setContent(browserHasGeolocation ?
                                          'Error: The Geolocation service failed.' :
                                          'Error: Your browser doesn\'t support geolocation.');
                }

                //Give the pins different colors
                var pinColor = "5864f0";
                var pinImage = new google.maps.MarkerImage('http://chart.googleapis.com/chart?chst=d_map_spin&chld=1.15|0|' + pinColor +
                  '|40|_|%E2%80%A2',
                    new google.maps.Size(21, 34),
                    new google.maps.Point(0, 0),
                    new google.maps.Point(10, 34),
                    new google.maps.Size(21, 34));


                //markers added, that pan and list information
                var orders = [
                    ['JSON Honeyjaeger', 'Get Groceries: $30', 43.074064, -87.8835057],
                    ['Tom Tang', 'Get Tools: $50', 43.075710, -87.875663],
                    ['Carlos Rodriguez', 'Grab Laundry: $20', 43.067325, -87.878130],
                    ['Andre Kum.', 'Pickup Kids: $15', 43.072787, -87.872069],
                    ['KChipp', 'Deliver goods: $90', 43.0324152, -87.9091722]
                ];
                var locations = [];

                locations = orders;
                var infowindow = new google.maps.InfoWindow();
                var directionsDisplay = new google.maps.DirectionsRenderer({ map: map });

                var start = null;
                var end = null;
                var marker, i;
                mappy();
                //////////////////////////////////////////
                function mappy() {

                    var markers = [];
                    //populates the map with my location array so that every marker has a unique number
                    for (i = 0; i < locations.length; i++) {
                        //iterates through all markers and places them
                        marker = new google.maps.Marker({
                            position: new google.maps.LatLng(locations[i][2], locations[i][3]),
                            map: map
                        });
                        markers.push(marker);
                        //on click features
                        google.maps.event.addListener(marker, 'click', (function (marker, i) {
                            return function () {
                                //get infoWindow with order request and pans to it
                                var info = (locations[i][0] + '</br>' + locations[i][1]);
                                infowindow.setContent(info);
                                infowindow.open(map, marker);
                                map.setZoom(15);
                                map.panTo(marker.getPosition());

                                //set the row below the map and directions with the infowindow details
                                document.getElementById("order").innerText = info;
                                //add geolocation for start position
                                navigator.geolocation.getCurrentPosition(function (position) {
                                    var start = {
                                        lat: position.coords.latitude,
                                        lng: position.coords.longitude
                                    };
                                    var end = (marker.getPosition());
                                    //directions on click
                                    var directionsService = new google.maps.DirectionsService;

                                    directionsDisplay.setPanel(document.getElementById("directions"));
                                    //go to directions function

                                    displayRoute(start, end, directionsService, directionsDisplay, map);
                                    Reset();
                                    //Remove marker function
                                    function Reset() {
                                        for (var i = 0; i < markers.length; i++) {
                                            markers[i].setMap(null);
                                        }
                                    }

                                    //DISPLAY
                                    function displayRoute(start, end, directionsService, directionsDisplay, map) {
                                        directionsService.route({
                                            origin: start,
                                            destination: end,
                                            travelMode: 'DRIVING'
                                        }, function (response, status) {
                                            if (status === 'OK') {
                                                directionsDisplay.setDirections(response);
                                            } else {
                                                alert('Could not display directions due to: ' + status);
                                            }
                                        });
                                    }
                                });
                            }
                        })(marker, i));
                    }
                }
                //reset markers
                map.addListener('click', function () {
                    map.setZoom(13);
                    document.getElementById("directions").innerHTML = "";
                    document.getElementById("order").innerHTML = "";
                    mappy();
                });
                //Removes markers
                function removeMarkers() {
                    locations = [];
                }
            }

        </script>
    </section>
}
